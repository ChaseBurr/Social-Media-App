{"version":3,"sources":["util/hooks.js","util/graphql.js","components/PostForm.js","context/auth.js","components/LikeButton.js","components/DeleteButton.js","components/PostCard.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","pages/UserProfile.js","components/MenuBar.js","App.js","ApolloProvider.js","index.js"],"names":["useForm","callback","initialState","useState","values","setValues","onChange","e","target","name","value","onSubmit","preventDefault","gql","require","FETCH_POSTS_QUERY","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","LIKE_POST_MUTATION","USER_INFORMATION_QUERY","PostForm","createPost","body","useMutation","CREATE_POST_MUTATION","variables","update","proxy","result","data","readQuery","query","writeQuery","getPosts","errorPolicy","error","Form","className","Field","Input","placeholder","Button","type","color","style","marginBottom","graphQLErrors","message","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","payload","AuthProvider","props","useReducer","dispatch","Provider","setItem","token","LikeButton","post","id","likes","postId","likePost","liked","setLiked","useEffect","find","like","username","likeButton","onClick","Icon","basic","as","Link","to","labelPosition","Label","pointing","length","DeleteButton","commentId","confirmOpen","setConfirmOpen","mutation","DELETE_COMMENT_MUTATION","DELETE_POST_MUTATION","filter","p","deletePostOrMutation","floated","margin","Confirm","open","onCancel","onConfirm","PostCard","createdAt","comments","commentCount","likeCount","useContext","src","alt","moment","fromNow","Home","useQuery","loading","posts","Loader","inverted","content","Transition","Group","map","Grid","Column","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","history","push","onError","err","extensions","exception","noValidate","label","primary","Object","keys","Register","window","location","href","addUser","email","confirmPassword","REGISTER_USER","register","console","log","SinglePost","postMarkup","match","params","comment","setComment","getPost","commentInputRef","useRef","current","blur","submitComment","paddingTop","justifyContent","Row","width","Image","size","float","borderRadius","Card","fluid","Content","Header","Meta","Description","image","event","ref","disabled","trim","UserProfile","getUserInfo","description","display","MenuBar","pathname","substr","position","App","Container","exact","path","component","httpLink","createHttpLink","uri","process","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.72fc7c4f.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport const useForm = (callback, initialState = {}) => {\r\n     const [values, setValues] = useState(initialState);\r\n\r\n     const onChange = (e) => {\r\n          setValues({ ...values, [e.target.name]: e.target.value });\r\n     };\r\n\r\n     const onSubmit = (e) => {\r\n          e.preventDefault();\r\n          callback();\r\n     };\r\n\r\n     return {\r\n          onChange,\r\n          onSubmit,\r\n          values,\r\n     };\r\n};\r\n","const gql = require(\"graphql-tag\");\r\n\r\nexport const FETCH_POSTS_QUERY = gql`\r\n     {\r\n          getPosts {\r\n               id\r\n               body\r\n               createdAt\r\n               username\r\n               likes {\r\n                    username\r\n               }\r\n               comments {\r\n                    id\r\n                    username\r\n                    createdAt\r\n                    body\r\n               }\r\n          }\r\n     }\r\n`;\r\n\r\nexport const SUBMIT_COMMENT_MUTATION = gql`\r\n     mutation($postId: ID!, $body: String!) {\r\n          createComment(postId: $postId, body: $body) {\r\n               id\r\n               comments {\r\n                    id\r\n                    username\r\n                    body\r\n                    createdAt\r\n               }\r\n          }\r\n     }\r\n`;\r\n\r\nexport const FETCH_POST_QUERY = gql`\r\n     query($postId: ID!) {\r\n          getPost(postId: $postId) {\r\n               id\r\n               body\r\n               createdAt\r\n               username\r\n               likes {\r\n                    username\r\n               }\r\n               comments {\r\n                    id\r\n                    username\r\n                    createdAt\r\n                    body\r\n               }\r\n          }\r\n     }\r\n`;\r\n\r\nexport const LIKE_POST_MUTATION = gql`\r\n     mutation likePost($postId: ID!) {\r\n          likePost(postId: $postId) {\r\n               id\r\n               likes {\r\n                    id\r\n                    username\r\n               }\r\n          }\r\n     }\r\n`;\r\n\r\nexport const USER_INFORMATION_QUERY = gql`\r\n     query($username: String!) {\r\n          getUserInfo(username: $username) {\r\n               createdAt\r\n               username\r\n               description\r\n          }\r\n     }\r\n`;\r\n\r\nexport const USER_DESCRIPTION_MUTATION = gql`\r\n     query($username: String!, $body: String!) {\r\n          userDescription(username: $username, body: $body) {\r\n               id\r\n               createAt\r\n               username\r\n               description\r\n          }\r\n     }\r\n`;\r\n","import { useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\n\r\nimport { Form, Button } from \"semantic-ui-react\";\r\nimport { useForm } from \"./../util/hooks\";\r\nimport { FETCH_POSTS_QUERY } from \"./../util/graphql\";\r\n\r\nconst gql = require(\"graphql-tag\");\r\n\r\nexport default function PostForm() {\r\n     const { values, onChange, onSubmit } = useForm(createPostCallback, {\r\n          body: \"\",\r\n     });\r\n\r\n     const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\r\n          variables: values,\r\n          update(proxy, result) {\r\n               // get all data from apollo cache\r\n               const data = proxy.readQuery({\r\n                    query: FETCH_POSTS_QUERY,\r\n               });\r\n               proxy.writeQuery({\r\n                    query: FETCH_POSTS_QUERY,\r\n                    data: {\r\n                         getPosts: [result.data.createPost, ...data.getPosts],\r\n                    },\r\n               });\r\n               values.body = \"\";\r\n          },\r\n          errorPolicy: \"all\",\r\n     });\r\n\r\n     function createPostCallback() {\r\n          createPost();\r\n     }\r\n\r\n     return (\r\n          <>\r\n               <Form onSubmit={onSubmit} className=\"post-form\">\r\n                    <h2>Create a post</h2>\r\n                    <Form.Field className=\"form-section\">\r\n                         <Form.Input\r\n                              className=\"form-input\"\r\n                              placeholder=\"Create a post\"\r\n                              name=\"body\"\r\n                              onChange={onChange}\r\n                              value={values.body}\r\n                              error={error ? true : false}\r\n                         />\r\n                         <Button type=\"submit\" color=\"teal\">\r\n                              SUBMIT\r\n                         </Button>\r\n                    </Form.Field>\r\n               </Form>\r\n               {error && (\r\n                    <div\r\n                         className=\"ui error message\"\r\n                         style={{ marginBottom: \"20px\" }}\r\n                    >\r\n                         <li>{error.graphQLErrors[0].message}</li>\r\n                    </div>\r\n               )}\r\n          </>\r\n     );\r\n}\r\n\r\n// createPost returns the values inside\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n     mutation createPost($body: String!) {\r\n          createPost(body: $body) {\r\n               id\r\n               body\r\n               createdAt\r\n               username\r\n               likes {\r\n                    id\r\n                    username\r\n                    createdAt\r\n               }\r\n               # likeCount\r\n               comments {\r\n                    id\r\n                    body\r\n                    username\r\n                    createdAt\r\n               }\r\n               # commentCount\r\n          }\r\n     }\r\n`;\r\n","import React, { useReducer, createContext } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst initialState = {\r\n     user: null,\r\n};\r\n\r\nif (localStorage.getItem(\"jwtToken\")) {\r\n     const decodedToken = jwtDecode(localStorage.getItem(\"jwtToken\"));\r\n\r\n     // check if token is expired\r\n     if (decodedToken.exp * 1000 < Date.now()) {\r\n          localStorage.removeItem(\"jwtToken\");\r\n     } else {\r\n          initialState.user = decodedToken;\r\n     }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n     user: null,\r\n     login: (userData) => {},\r\n     logout: () => {},\r\n});\r\n\r\nfunction authReducer(state, action) {\r\n     switch (action.type) {\r\n          case \"LOGIN\":\r\n               return {\r\n                    ...state,\r\n                    user: action.payload,\r\n               };\r\n          case \"LOGOUT\":\r\n               return {\r\n                    ...state,\r\n                    user: null,\r\n               };\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nfunction AuthProvider(props) {\r\n     const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n     const login = (userData) => {\r\n          localStorage.setItem(\"jwtToken\", userData.token);\r\n          dispatch({\r\n               type: \"LOGIN\",\r\n               payload: userData,\r\n          });\r\n     };\r\n\r\n     const logout = () => {\r\n          localStorage.removeItem(\"jwtToken\");\r\n          dispatch({\r\n               type: \"LOGOUT\",\r\n          });\r\n     };\r\n\r\n     return (\r\n          <AuthContext.Provider\r\n               value={{ user: state.user, login, logout }}\r\n               {...props}\r\n          />\r\n     );\r\n}\r\n\r\nexport { AuthContext, AuthProvider };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Icon, Label, Button } from \"semantic-ui-react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Mutations\r\nimport { LIKE_POST_MUTATION } from \"./../util/graphql\";\r\n\r\nexport default function LikeButton({ user, post: { id, likes } }) {\r\n     const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n          variables: { postId: id },\r\n     });\r\n\r\n     const [liked, setLiked] = useState(false);\r\n     useEffect(() => {\r\n          if (user && likes.find((like) => like.username === user.username)) {\r\n               setLiked(true);\r\n          } else setLiked(false);\r\n     }, [user, likes]);\r\n\r\n     // Generate like button depending on user\r\n     const likeButton = user ? (\r\n          liked ? (\r\n               <Button color=\"teal\" onClick={likePost}>\r\n                    <Icon name=\"heart\" />\r\n               </Button>\r\n          ) : (\r\n               <Button color=\"teal\" basic onClick={likePost}>\r\n                    <Icon name=\"heart\" />\r\n               </Button>\r\n          )\r\n     ) : (\r\n          <Button as={Link} to=\"/login\" color=\"teal\" basic>\r\n               <Icon name=\"heart\" />\r\n          </Button>\r\n     );\r\n\r\n     return (\r\n          <Button as=\"div\" labelPosition=\"right\">\r\n               {likeButton}\r\n               <Label basic color=\"teal\" pointing=\"left\">\r\n                    {likes.length}\r\n               </Label>\r\n          </Button>\r\n     );\r\n}\r\n","import { useMutation } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\nimport React, { useState } from \"react\";\r\nimport { Icon, Button, Confirm } from \"semantic-ui-react\";\r\nimport { FETCH_POSTS_QUERY } from \"./../util/graphql\";\r\n\r\nexport default function DeleteButton({ postId, callback, commentId }) {\r\n     const [confirmOpen, setConfirmOpen] = useState(false);\r\n\r\n     const mutation = commentId\r\n          ? DELETE_COMMENT_MUTATION\r\n          : DELETE_POST_MUTATION;\r\n\r\n     const [deletePostOrMutation] = useMutation(mutation, {\r\n          variables: { postId, commentId },\r\n          update(proxy, result) {\r\n               setConfirmOpen(false);\r\n\r\n               if (!commentId) {\r\n                    // get data\r\n                    const data = proxy.readQuery({\r\n                         query: FETCH_POSTS_QUERY,\r\n                    });\r\n\r\n                    // filter posts\r\n                    let filter = data.getPosts.filter((p) => p.id !== postId);\r\n\r\n                    // remove post from cache\r\n                    proxy.writeQuery({\r\n                         query: FETCH_POSTS_QUERY,\r\n                         data: { getPosts: [...filter] },\r\n                    });\r\n\r\n                    if (callback) callback(); // redirect to home page\r\n               }\r\n          },\r\n     });\r\n\r\n     return (\r\n          <>\r\n               <Button\r\n                    as=\"div\"\r\n                    color=\"red\"\r\n                    floated=\"right\"\r\n                    onClick={() => setConfirmOpen(true)}\r\n               >\r\n                    <Icon name=\"trash\" style={{ margin: 0 }} />\r\n               </Button>\r\n               <Confirm\r\n                    open={confirmOpen}\r\n                    onCancel={() => setConfirmOpen(false)}\r\n                    onConfirm={deletePostOrMutation}\r\n               />\r\n          </>\r\n     );\r\n}\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n     mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n          deleteComment(postId: $postId, commentId: $commentId) {\r\n               id\r\n               comments {\r\n                    id\r\n                    username\r\n                    createdAt\r\n                    body\r\n               }\r\n          }\r\n     }\r\n`;\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\n     mutation deletePost($postId: ID!) {\r\n          deletePost(postId: $postId)\r\n     }\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Label, Image, Button } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nimport { AuthContext } from \"./../context/auth\";\r\nimport { LikeButton, DeleteButton } from \"./exports\";\r\n\r\nexport default function PostCard({\r\n     post: {\r\n          body,\r\n          createdAt,\r\n          id,\r\n          username,\r\n          comments,\r\n          commentCount,\r\n          likes,\r\n          likeCount,\r\n     },\r\n}) {\r\n     const { user } = useContext(AuthContext);\r\n\r\n     function commentOnPost() {}\r\n\r\n     return (\r\n          <div className=\"post\">\r\n               <img\r\n                    src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n                    alt={username}\r\n               />\r\n               <div className=\"post-content\">\r\n                    <Link to={`/user/${username}`}>\r\n                         <h3 className=\"username\">{username}</h3>\r\n                    </Link>\r\n                    <Link to={`/posts/${id}`}>\r\n                         <p className=\"created\">\r\n                              {moment(createdAt).fromNow()}\r\n                         </p>\r\n                         <p className=\"post-body\">{body}</p>\r\n                    </Link>\r\n\r\n                    <LikeButton user={user} post={{ id, likes, likeCount }} />\r\n\r\n                    {/* Comment Button */}\r\n                    <Button\r\n                         labelPosition=\"right\"\r\n                         onClick={commentOnPost}\r\n                         as={Link}\r\n                         to={`/posts/${id}`}\r\n                    >\r\n                         <Button color=\"blue\" basic>\r\n                              <Icon name=\"comments\" />\r\n                         </Button>\r\n                         <Label basic color=\"blue\" pointing=\"left\">\r\n                              {comments.length}\r\n                         </Label>\r\n                    </Button>\r\n                    {user && user.username === username && (\r\n                         <DeleteButton postId={id} />\r\n                    )}\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { Grid, Transition, Loader } from \"semantic-ui-react\";\r\n\r\nimport PostForm from \"./../components/PostForm\";\r\nimport PostCard from \"./../components/PostCard\";\r\n\r\nimport { AuthContext } from \"./../context/auth\";\r\nimport { FETCH_POSTS_QUERY } from \"./../util/graphql\";\r\n\r\nexport default function Home() {\r\n     const { user } = useContext(AuthContext);\r\n     const { loading, data: { getPosts: posts } = {} } = useQuery(\r\n          FETCH_POSTS_QUERY\r\n     );\r\n\r\n     return (\r\n          <div className=\"posts\">\r\n               {\r\n                    // let user add post if logged in\r\n                    user && <PostForm />\r\n               }\r\n\r\n               {loading ? (\r\n                    <Loader inverted content=\"Loading\" />\r\n               ) : (\r\n                    <Transition.Group>\r\n                         {posts &&\r\n                              posts.map((post) => (\r\n                                   <Grid.Column key={post.id}>\r\n                                        <PostCard post={post} />\r\n                                   </Grid.Column>\r\n                              ))}\r\n                    </Transition.Group>\r\n               )}\r\n          </div>\r\n     );\r\n}\r\n","import gql from \"graphql-tag\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\n// Context\r\nimport { AuthContext } from \"./../context/auth\";\r\n\r\n// Custom hooks\r\nimport { useForm } from \"./../util/hooks\";\r\n\r\n// Styling\r\nimport { Button, Form } from \"semantic-ui-react\";\r\n\r\nfunction Login(props) {\r\n     const context = useContext(AuthContext);\r\n     const [errors, setErrors] = useState({});\r\n\r\n     const { onChange, onSubmit, values } = useForm(loginUserCallback, {\r\n          username: \"\",\r\n          password: \"\",\r\n     });\r\n\r\n     const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n          update(_, { data: { login: userData } }) {\r\n               context.login(userData);\r\n               props.history.push(\"/\");\r\n          },\r\n          onError(err) {\r\n               setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n          },\r\n          variables: values,\r\n     });\r\n\r\n     function loginUserCallback() {\r\n          loginUser();\r\n     }\r\n\r\n     return (\r\n          <div className=\"form-container\">\r\n               <Form\r\n                    onSubmit={onSubmit}\r\n                    noValidate\r\n                    className={loading ? \"loading\" : \"\"}\r\n               >\r\n                    <h1>Login</h1>\r\n                    <Form.Input\r\n                         label=\"Username\"\r\n                         placeholder=\"Username..\"\r\n                         name=\"username\"\r\n                         type=\"text\"\r\n                         value={values.username}\r\n                         error={errors.username ? true : false}\r\n                         onChange={onChange}\r\n                    />\r\n                    <Form.Input\r\n                         label=\"Password\"\r\n                         placeholder=\"Password..\"\r\n                         name=\"password\"\r\n                         type=\"password\"\r\n                         value={values.password}\r\n                         error={errors.password ? true : false}\r\n                         onChange={onChange}\r\n                    />\r\n                    <Button type=\"submit\" primary>\r\n                         Login\r\n                    </Button>\r\n               </Form>\r\n               {Object.keys(errors).length > 0 && (\r\n                    <div className=\"ui error message\">\r\n                         <ul className=\"list\">\r\n                              {Object.values(errors).map((value) => (\r\n                                   <li key={value}>{value}</li>\r\n                              ))}\r\n                         </ul>\r\n                    </div>\r\n               )}\r\n          </div>\r\n     );\r\n}\r\n\r\nconst LOGIN_USER = gql`\r\n     mutation login($username: String!, $password: String!) {\r\n          login(username: $username, password: $password) {\r\n               id\r\n               email\r\n               username\r\n               createdAt\r\n               token\r\n          }\r\n     }\r\n`;\r\n\r\nexport default Login;\r\n","import gql from \"graphql-tag\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\n// Context\r\nimport { AuthContext } from \"./../context/auth\";\r\n\r\n// Custom hooks\r\nimport { useForm } from \"./../util/hooks\";\r\n\r\n// Styling\r\nimport { Button, Form } from \"semantic-ui-react\";\r\n\r\nexport default function Register(props) {\r\n     const { user } = useContext(AuthContext);\r\n     if (user) {\r\n          window.location.href = \"/\";\r\n     }\r\n\r\n     const context = useContext(AuthContext); // gives access to context\r\n\r\n     const [errors, setErrors] = useState({});\r\n\r\n     const { onChange, onSubmit, values } = useForm(registerUser, {\r\n          username: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          confirmPassword: \"\",\r\n     });\r\n\r\n     const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n          update(proxy, { data: { register: userData } }) {\r\n               context.login(userData);\r\n               props.history.push(\"/\");\r\n          },\r\n          onError(err) {\r\n               console.log(err);\r\n               setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n          },\r\n          variables: values,\r\n     });\r\n\r\n     function registerUser() {\r\n          addUser();\r\n     }\r\n\r\n     return (\r\n          <div className=\"form-container\">\r\n               <Form\r\n                    onSubmit={onSubmit}\r\n                    noValidate\r\n                    className={loading ? \"loading\" : \"\"}\r\n               >\r\n                    <h1>Register</h1>\r\n                    <Form.Input\r\n                         label=\"Username\"\r\n                         placeholder=\"Username..\"\r\n                         name=\"username\"\r\n                         type=\"text\"\r\n                         value={values.username}\r\n                         errors={errors.username ? true : false}\r\n                         onChange={onChange}\r\n                    />\r\n                    <Form.Input\r\n                         label=\"Email\"\r\n                         placeholder=\"Email..\"\r\n                         name=\"email\"\r\n                         type=\"email\"\r\n                         value={values.email}\r\n                         errors={errors.email ? true : false}\r\n                         onChange={onChange}\r\n                    />\r\n                    <Form.Input\r\n                         label=\"Password\"\r\n                         placeholder=\"Password..\"\r\n                         name=\"password\"\r\n                         type=\"password\"\r\n                         value={values.password}\r\n                         errors={errors.password ? true : false}\r\n                         onChange={onChange}\r\n                    />\r\n                    <Form.Input\r\n                         label=\"Confirm Password\"\r\n                         placeholder=\"Confirm Password..\"\r\n                         name=\"confirmPassword\"\r\n                         type=\"password\"\r\n                         value={values.confirmPassword}\r\n                         errors={errors.confirmPassword ? true : false}\r\n                         onChange={onChange}\r\n                    />\r\n                    <Button type=\"submit\" primary>\r\n                         Register\r\n                    </Button>\r\n               </Form>\r\n               {Object.keys(errors).length > 0 && (\r\n                    <div className=\"ui error message\">\r\n                         <div className=\"list\">\r\n                              {Object.values(errors).map((value) => (\r\n                                   <li key={value}>{value}</li>\r\n                              ))}\r\n                         </div>\r\n                    </div>\r\n               )}\r\n          </div>\r\n     );\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n     mutation register(\r\n          $username: String!\r\n          $email: String!\r\n          $password: String!\r\n          $confirmPassword: String!\r\n     ) {\r\n          register(\r\n               registerInput: {\r\n                    username: $username\r\n                    email: $email\r\n                    password: $password\r\n                    confirmPassword: $confirmPassword\r\n               }\r\n          ) {\r\n               id\r\n               email\r\n               username\r\n               createdAt\r\n               token\r\n          }\r\n     }\r\n`;\r\n","import React, { useContext, useState, useRef } from \"react\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\n\r\n// Semantic UI Components\r\nimport {\r\n     Button,\r\n     Card,\r\n     Form,\r\n     Grid,\r\n     Icon,\r\n     Image,\r\n     Label,\r\n} from \"semantic-ui-react\";\r\n\r\n// Import Mutations\r\nimport { FETCH_POST_QUERY, SUBMIT_COMMENT_MUTATION } from \"./../util/graphql\";\r\n\r\n// time format\r\nimport moment from \"moment\";\r\n\r\n// components\r\nimport { LikeButton, DeleteButton } from \"../components/exports\";\r\nimport { AuthContext } from \"../context/auth\";\r\n\r\nexport default function SinglePost(props) {\r\n     function deletePostCallback() {\r\n          props.history.push(\"/\");\r\n     }\r\n\r\n     // Grab post id from URL\r\n     const postId = props.match.params.postId;\r\n     const { user } = useContext(AuthContext);\r\n     const [comment, setComment] = useState(\"\");\r\n     const { data: { getPost } = {} } = useQuery(FETCH_POST_QUERY, {\r\n          variables: {\r\n               postId,\r\n          },\r\n     });\r\n\r\n     // used to un-focus input\r\n     const commentInputRef = useRef(null);\r\n\r\n     // handles comment submission\r\n     const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\r\n          update() {\r\n               setComment(\"\");\r\n               commentInputRef.current.blur();\r\n          },\r\n          variables: { postId, body: comment },\r\n          errorPolicy: \"all\",\r\n     });\r\n\r\n     // Generate html\r\n     let postMarkup;\r\n     if (!getPost) {\r\n          postMarkup = <p>Loading post...</p>;\r\n     } else {\r\n          const { id, body, createdAt, username, comments, likes } = getPost;\r\n\r\n          postMarkup = (\r\n               <Grid style={{ paddingTop: \"60px\", justifyContent: \"center\" }}>\r\n                    <Grid.Row>\r\n                         <Grid.Column width={2}>\r\n                              <Image\r\n                                   src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n                                   size=\"small\"\r\n                                   float=\"right\"\r\n                                   style={{ borderRadius: \"50%\" }}\r\n                              />\r\n                         </Grid.Column>\r\n\r\n                         <Grid.Column width={10}>\r\n                              <Card fluid>\r\n                                   <Card.Content>\r\n                                        <Card.Header className=\"username\">\r\n                                             {username}\r\n                                        </Card.Header>\r\n                                        <Card.Meta className=\"created\">\r\n                                             {moment(createdAt).fromNow(true)}\r\n                                        </Card.Meta>\r\n                                        <Card.Description className=\"post-body\">\r\n                                             {body}\r\n                                        </Card.Description>\r\n                                   </Card.Content>\r\n                                   <hr />\r\n                                   <Card.Content>\r\n                                        <LikeButton\r\n                                             user={user}\r\n                                             post={{ id, likes }}\r\n                                        />\r\n                                        <Button\r\n                                             as=\"div\"\r\n                                             labelPosition=\"right\"\r\n                                             onClick={() =>\r\n                                                  console.log(\"comment on post\")\r\n                                             }\r\n                                        >\r\n                                             <Button basic color=\"blue\">\r\n                                                  <Icon name=\"comments\" />\r\n                                             </Button>\r\n                                             <Label\r\n                                                  basic\r\n                                                  color=\"blue\"\r\n                                                  pointing=\"left\"\r\n                                             >\r\n                                                  {comments.length}\r\n                                             </Label>\r\n                                        </Button>\r\n                                        {user && user.username === username && (\r\n                                             <DeleteButton\r\n                                                  postId={id}\r\n                                                  callback={deletePostCallback}\r\n                                             />\r\n                                        )}\r\n                                   </Card.Content>\r\n                              </Card>\r\n                              {likes && likes.length > 0 && (\r\n                                   <Card fluid>\r\n                                        <Card.Content>\r\n                                             <p>Liked by</p>\r\n                                             {likes.map((like) => (\r\n                                                  <Label\r\n                                                       key={like.username}\r\n                                                       image\r\n                                                  >\r\n                                                       <img\r\n                                                            src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n                                                            alt={like.username}\r\n                                                       />\r\n                                                       {like.username}\r\n                                                  </Label>\r\n                                             ))}\r\n                                        </Card.Content>\r\n                                   </Card>\r\n                              )}\r\n                              {user && (\r\n                                   <Card fluid>\r\n                                        <Card.Content>\r\n                                             <p>Post a comment</p>\r\n                                             <Form>\r\n                                                  <div className=\"ui action input fluid\">\r\n                                                       <input\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Comment..\"\r\n                                                            name=\"comment\"\r\n                                                            value={comment}\r\n                                                            onChange={(event) =>\r\n                                                                 setComment(\r\n                                                                      event\r\n                                                                           .target\r\n                                                                           .value\r\n                                                                 )\r\n                                                            }\r\n                                                            ref={\r\n                                                                 commentInputRef\r\n                                                            }\r\n                                                       />\r\n                                                       <button\r\n                                                            type=\"submit\"\r\n                                                            className=\"ui button teal\"\r\n                                                            disabled={\r\n                                                                 comment.trim() ===\r\n                                                                 \"\"\r\n                                                            }\r\n                                                            onClick={\r\n                                                                 submitComment\r\n                                                            }\r\n                                                       >\r\n                                                            Submit\r\n                                                       </button>\r\n                                                  </div>\r\n                                             </Form>\r\n                                        </Card.Content>\r\n                                   </Card>\r\n                              )}\r\n                              {comments.map((comment) => (\r\n                                   <Card fluid key={comment.id}>\r\n                                        <Card.Content>\r\n                                             {user &&\r\n                                                  user.username ===\r\n                                                       comment.username && (\r\n                                                       <DeleteButton\r\n                                                            postId={id}\r\n                                                            commentId={\r\n                                                                 comment.id\r\n                                                            }\r\n                                                       />\r\n                                                  )}\r\n                                             <Card.Header className=\"username\">\r\n                                                  {comment.username}\r\n                                             </Card.Header>\r\n                                             <Card.Meta className=\"createdat\">\r\n                                                  {moment(\r\n                                                       comment.createdAt\r\n                                                  ).fromNow(true)}\r\n                                             </Card.Meta>\r\n                                             <Card.Description>\r\n                                                  {comment.body}\r\n                                             </Card.Description>\r\n                                        </Card.Content>\r\n                                   </Card>\r\n                              ))}\r\n                         </Grid.Column>\r\n                    </Grid.Row>\r\n               </Grid>\r\n          );\r\n     }\r\n\r\n     return postMarkup;\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Card, Image, Form, Button } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport { AuthContext } from \"./../context/auth\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\n\r\nimport { useForm } from \"./../util/hooks\";\r\n\r\nimport { USER_INFORMATION_QUERY } from \"./../util/graphql\";\r\n\r\nexport default function UserProfile(props) {\r\n     // grab username from url\r\n     const username = props.match.params.username;\r\n\r\n     //  Grab user\r\n     const { user } = useContext(AuthContext);\r\n\r\n     // grab user profile data\r\n     const { data: { getUserInfo: userData } = {} } = useQuery(\r\n          USER_INFORMATION_QUERY,\r\n          {\r\n               variables: { username },\r\n          }\r\n     );\r\n\r\n     const { values, onChange, onSubmit } = useForm(callback, {\r\n          description: \"\",\r\n     });\r\n\r\n     function callback() {}\r\n\r\n     return (\r\n          <>\r\n               {userData ? (\r\n                    <>\r\n                         <div style={{ paddingTop: \"1rem\" }} />\r\n                         <Card fluid className=\"user-profile\">\r\n                              <Card.Content\r\n                                   style={{\r\n                                        display: \"flex\",\r\n                                   }}\r\n                              >\r\n                                   <Image\r\n                                        src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n                                        size=\"small\"\r\n                                        float=\"left\"\r\n                                        style={{ borderRadius: \"50%\" }}\r\n                                   />\r\n                                   <div className=\"user-info-page\">\r\n                                        <h3 className=\"username\">\r\n                                             {userData.username}\r\n                                        </h3>\r\n                                        <p className=\"created\">\r\n                                             User signed up{\" \"}\r\n                                             {moment(\r\n                                                  userData.createdAt\r\n                                             ).fromNow()}\r\n                                        </p>\r\n                                        <p className=\"description\">\r\n                                             {!userData.description ? (\r\n                                                  user?.username ===\r\n                                                  username ? (\r\n                                                       <Form\r\n                                                            onSubmit={onSubmit}\r\n                                                       >\r\n                                                            <h3>\r\n                                                                 Add a\r\n                                                                 description\r\n                                                            </h3>\r\n                                                            <Form.Field>\r\n                                                                 <Form.Input\r\n                                                                      placeholder=\"Add a description\"\r\n                                                                      name=\"body\"\r\n                                                                      onChange={\r\n                                                                           onChange\r\n                                                                      }\r\n                                                                      value={\r\n                                                                           values.body\r\n                                                                      }\r\n                                                                      // error={\r\n                                                                      //      error\r\n                                                                      //           ? true\r\n                                                                      //           : false\r\n                                                                      // }\r\n                                                                 />\r\n                                                                 <Button\r\n                                                                      type=\"submit\"\r\n                                                                      color=\"teal\"\r\n                                                                 >\r\n                                                                      SUBMIT\r\n                                                                 </Button>\r\n                                                            </Form.Field>\r\n                                                       </Form>\r\n                                                  ) : (\r\n                                                       <p>\r\n                                                            {username} doesn't\r\n                                                            have a description.\r\n                                                       </p>\r\n                                                  )\r\n                                             ) : (\r\n                                                  \"No description added\"\r\n                                             )}\r\n                                        </p>\r\n                                   </div>\r\n                              </Card.Content>\r\n                         </Card>\r\n                    </>\r\n               ) : (\r\n                    <div>Loading..</div>\r\n               )}\r\n          </>\r\n     );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu } from \"semantic-ui-react\";\r\n\r\nimport { AuthContext } from \"./../context/auth\";\r\n\r\nexport default function MenuBar() {\r\n     const { user, logout } = useContext(AuthContext);\r\n\r\n     // grab url\r\n     const pathname = window.location.pathname;\r\n\r\n     // set path\r\n     const path = pathname === \"/\" ? \"home\" : pathname.substr(1);\r\n\r\n     const menuBar = user ? (\r\n          <nav className=\"navbar\">\r\n               <Link to=\"/\" className=\"logo\">\r\n                    POSTS\r\n               </Link>\r\n               <div className=\"user-options\">\r\n                    <button\r\n                         position=\"right\"\r\n                         onClick={logout}\r\n                         as={Link}\r\n                         to=\"/login\"\r\n                    >\r\n                         <i className=\"fas fa-sign-out-alt\"></i>\r\n                    </button>\r\n               </div>\r\n          </nav>\r\n     ) : (\r\n          <nav className=\"navbar\">\r\n               <Link to=\"/\" className=\"logo\">\r\n                    SOCIAL MEDIA\r\n               </Link>\r\n               <div className=\"user-options\">\r\n                    <Link to=\"/login\" className=\"option-item\">\r\n                         LOGIN\r\n                    </Link>\r\n                    <Link to=\"/register\" className=\"option-item\">\r\n                         REGISTER\r\n                    </Link>\r\n               </div>\r\n          </nav>\r\n     );\r\n\r\n     return menuBar;\r\n}\r\n","import { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Container } from \"semantic-ui-react\";\nimport { useContext } from \"react\";\n\n// CSS imports\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\n// Page imports\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport SinglePost from \"./pages/SinglePost\";\nimport UserProfile from \"./pages/UserProfile\";\n\nimport { AuthProvider } from \"./context/auth\";\nimport AuthRoute from \"./util/AuthRoute\";\n\n// Component exports\nimport MenuBar from \"./components/MenuBar\";\n\nfunction App() {\n     return (\n          <AuthProvider>\n               <Router>\n                    <MenuBar />\n                    <Container>\n                         <Route exact path=\"/\" component={Home} />\n                         <Route exact path=\"/login\" component={Login} />\n                         <Route exact path=\"/register\" component={Register} />\n                         <Route\n                              exact\n                              path=\"/posts/:postId\"\n                              component={SinglePost}\n                         />\n                         <Route\n                              exact\n                              path=\"/user/:username\"\n                              component={UserProfile}\n                         />\n                    </Container>\n               </Router>\n          </AuthProvider>\n     );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport App from \"./App\";\r\nimport {\r\n     ApolloClient,\r\n     InMemoryCache,\r\n     createHttpLink,\r\n     ApolloProvider,\r\n} from \"@apollo/client\";\r\n\r\nimport { setContext } from \"apollo-link-context\";\r\n\r\nconst IP_ADDRESS = process.env.REACT_APP_SERVER_IP_ADDRESS;\r\n\r\nconst httpLink = createHttpLink({\r\n     uri: IP_ADDRESS,\r\n});\r\n\r\n// set token in the header\r\nconst authLink = setContext(() => {\r\n     const token = localStorage.getItem(\"jwtToken\");\r\n     return {\r\n          headers: {\r\n               Authorization: token ? `Bearer ${token}` : \"\",\r\n          },\r\n     };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n     link: authLink.concat(httpLink),\r\n     cache: new InMemoryCache(),\r\n});\r\n\r\nexport default (\r\n     <ApolloProvider client={client}>\r\n          <App />\r\n     </ApolloProvider>\r\n);\r\n","import ReactDOM from \"react-dom\";\n\n// Server\nimport ApolloProvider from \"./ApolloProvider\";\n\nReactDOM.render(ApolloProvider, document.getElementById(\"root\"));\n"],"sourceRoot":""}